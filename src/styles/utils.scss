@use "sass:list";
@use "sass:math";

@use "/src/styles/breakpoints";

@mixin section-margin($start, $end) {
    margin-block: #{$start} #{$end};

    @media #{breakpoints.$mobile-and-tablet} and (orientation: landscape) {
        margin-block: calc(#{$start} - 4rem) calc(#{$end} - 4rem);
    }
}

@mixin define-batch($items) {
    @media #{breakpoints.$mobile-and-tablet} {
        @each $item in $items {
            $mobile: list.nth($item, 2) or list.nth($item, 3) or list.nth($item, 4);
            $tablet: list.nth($item, 3) or $mobile;

            #{list.nth($item, 1)}: responsive-size($mobile, $tablet, 430, 834);
        }
    }

    @media #{breakpoints.$desktop} {
        @each $item in $items {
            $mobile: list.nth($item, 2) or list.nth($item, 3) or list.nth($item, 4);
            $tablet: list.nth($item, 3) or $mobile;
            $desktop: list.nth($item, 4) or $tablet;

            #{list.nth($item, 1)}: responsive-size($tablet, $desktop, 834, 1440);
        }
    }

    @media #{breakpoints.$zero} {
        @each $item in $items {
            $mobile: list.nth($item, 2) or list.nth($item, 3) or list.nth($item, 4);

            #{list.nth($item, 1)}: responsive-size(0, $mobile, 100, 430);
        }
    }
}

@function responsive-size($min-size, $max-size, $start-width: 430, $end-width: 1440) {
    $numerator: ($end-width * $min-size) - ($start-width * $max-size);
    $denominator: $end-width - $start-width;
    $base-px: math.div($numerator, $denominator);
    $vi: precise(math.div($min-size - $base-px, $start-width) * 100vi);

    @if $min-size < $max-size {
        @return clamp(px-to-rem($min-size), px-to-rem($base-px) + $vi, px-to-rem($max-size));
    } @else {
        @return clamp(px-to-rem($max-size), px-to-rem($base-px) + $vi, px-to-rem($min-size));
    }
}

@function precise($value, $precision: 2) {
    $multiplier: math.pow(10, $precision);
    @return math.div(math.round($value * $multiplier), $multiplier);
}

@function px-to-rem($value) {
    @return precise($value * 0.1rem);
}

@function strip-units($value) {
    @return math.div($value, ($value * 0 + 1));
}
